
function addStyleString(str) {
	var node = document.createElement('style');
	node.innerHTML = str;
	document.body.appendChild(node);
}

function addNextBtn(page) {
	if ($('.actions .btn-success').length === 0) {
		$('.actions').append('<a href="/#/' + page.toString().hashCode() + '"><button class="btn btn-success">SIGUIENTE</button></a>');
	}
}

function unimportantFunction(silent) {
	addNextBtn(2);
	if (!silent) {
		var str = "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@";
		
		console.log(str);
		console.log("Has entrado en el modo avanzado de la aplicación. Ten cuidado con lo que haces a partir de ahora!. Puedes darle al botón de siguiente para acceder a la interfaz de desactivación.");
	}
}

fetch = window.fetchOriginal;
window.fetch = window.fetchOriginal;

window.routerCallback = function () {};
var puzzlesSolved = [];
$(function () {


	async function onNewErStateCallback(msg){
		var newRetos = $.grep(msg.puzzlesSolved, function(el){return $.inArray(el, puzzlesSolved) == -1});
		if (newRetos && newRetos.length) {
			var latestPuzzleSolved = Math.max(...newRetos);
			for (let r in newRetos) {
				let reto = newRetos[r];
				switch(reto) {
				case 2:
					try {
						if (latestPuzzleSolved === 2) window.location.href = ("/#/"+("1".hashCode()));
						unimportantFunction(true);
					} catch(e) {
						console.error(e)
					}
					break;
				case 3:
					try {
						if (latestPuzzleSolved === 3) window.location.href = ("/#/"+("2".hashCode()));
						addNextBtn(3);
						$(".next2").attr('style','display:block !important');
						$(".next2-w").attr('style','display:none !important');
					} catch(e) {
						console.error(e)
					}

					break;
				case 4:
					try {
						if (latestPuzzleSolved === 4) window.location.href = ("/#/"+("3".hashCode()));
						addNextBtn(4);
						$(".next3").attr('style','display:block !important');
						$(".next3-w").attr('style','display:none !important');

					} catch(e) {}
					break;
				case 5:
					try {
						if (latestPuzzleSolved === 5) window.location.href = ("/#/"+("4".hashCode()));
						escapp.displayCompletionDialog();
					} catch(e) {}
					break;

				default:
					break;
				}
			}

		}
		puzzlesSolved = msg.puzzlesSolved;
	}


	var ESCAPP_CONFIG = {
		"endpoint": "https://escape.dit.upm.es/api/escapeRooms/367",
		"localStorageKey": "escapp",
		"onNewErStateCallback": onNewErStateCallback,
		"imagesPath": "/escapp/images/",
		"I18n": {
			"locale": "es",
			"defaultLocale": "es",
			"availableLocales": ["es", "en"]
		},
		"browserRestrictions": {
			"chrome": ">20.1.1432"
		},
		"browserRestrictionsDefault": true,
		"autovalidate": false,
		"appPuzzleIds": [1, 2, 3, 4, 5],
		"requiredPuzzlesIds": [],
		"forceValidation": true
	};

	var escapp = new ESCAPP(ESCAPP_CONFIG);

	// QUITAR START
	// window.escapp = escapp;
	// QUITAR END

	function isSuperado(id) {
		return escapp.getNewestState().puzzlesSolved.indexOf(id) !== -1;
	}
	function getSol(id) {
		return escapp.getNewestState().puzzleData[id].solution;
	}
	function getMsg(id) {
		return escapp.getNewestState().puzzleData[id].msg;
	}
	function redirect(url) {
		window.location.href = url;
	}
	function isNotSuperadoButAllPreviousAre(id) {
		return escapp.getNewestState().puzzlesSolved.length + 1 === id;
	}



	window.routerCallback = function (match) {
		try {
			var currentRoute = parseInt(match.url.toString().substring(1, 5).unhashCode());
			var max = { 1: 0, 2: 2, 3: 3, 4: 4 };
			var redirects = { 1: "1", 2: "2", 3: "3", 4: "4", 5: "4" };
			var latestRetoSuperado = Math.max.apply(null, escapp.getNewestState().puzzlesSolved);
			if (latestRetoSuperado < max[currentRoute]) {
				window.location.href = "/#/" + redirects[latestRetoSuperado].hashCode();
			}

			if ((currentRoute == 1) && isSuperado(2)){
				unimportantFunction(true);
			}
		} catch (e) {
			// console.error(e);
		}
	};
	window.routerCallback({ url: window.location.hash.substring(1, window.location.hash.length) });

	escapp.validate(function (success) {
		puzzlesSolved = escapp.getNewestState().puzzlesSolved || [];

		if (success) {

			// Puzzle 1
			if (!isSuperado(1)) {
				escapp.submitPuzzle(1, "Screen1", {}, function () {
					// console.log("Solved puzzle 1: Accessed app")
				});
			}

			// Puzzle 2
			var sosCallback = function () {
				if (isSuperado(2)) {
					try {
						if ($('#screen1').length > 0) {
							unimportantFunction();
						}
					} catch(e) {unimportantFunction();}

				} else if (isNotSuperadoButAllPreviousAre(2)) {
					escapp.submitPuzzle(2, "Screen2", {}, function (success) {
						if (success) {
							try {
								if ($('#screen1').length > 0) {
									unimportantFunction();
								}
							} catch(e) {unimportantFunction();}
						}
					});
				}
			};

			window.sos = window.SOS = sosCallback.bind(fetch, window.fetch);


			// Puzzle 3
			var clicked = [];

			$(document).on("click", ".bomb-item .my-switch", function (e) {
				try {
					var el = parseInt(this.closest('.bomb-item').id.split("bomb-item-")[1], 10);
					var idx = clicked.indexOf(el);
					if (idx == -1) {
						clicked.push(el);
					} else {
						clicked.splice(idx, 1);
					}

					if (clicked.length === 4) {
						if (isNotSuperadoButAllPreviousAre(3)) {
							console.log("SUMBITTING PUZZLE 3");
							escapp.submitPuzzle(3, clicked.join(","), {}, function (success) {
								try {
									if (success) {
										// console.log("Solved puzzle 3: Deactivated components");
										addNextBtn(3);
										$(".next2").attr('style','display:block !important');
										$(".next2-w").attr('style','display:none !important');
									} else {
										$(".next2").attr('style','display:none !important');
										$(".next2-w").attr('style','display:block !important');
									}
								} catch(e) {
									console.error(e);
								}

							});
						} else if (isSuperado(3) && (getSol(3) === clicked.join(","))) {
							addNextBtn(3);
							$(".next2").attr('style','display:block !important');
							$(".next2-w").attr('style','display:none !important');
						} else {
							$(".next2").attr('style','display:none !important');
							$(".next2-w").attr('style','display:block !important');
						}
					}
				} catch (e) {
					console.error(e);
				}
			});

			// Puzzle 4
			function callbackP4(e) {
				try {
					if (e.target.value.length === 4) {
						if (isNotSuperadoButAllPreviousAre(4)) {
							escapp.submitPuzzle(4, e.target.value, {}, function (success) {
								if (success) {
									// console.log(res, "Solved puzzle 4: Temperature mechanism activated");
									addNextBtn(4);
									$(e.target).attr("disabled", true);
									$(".next3").attr('style','display:block !important');
									$(".next3-w").attr('style','display:none !important');
								} else {
									$(".next3").attr('style','display:none !important');
									$(".next3-w").attr('style','display:block !important');
								}
							});
						} else if (isSuperado(4) && (getSol(4) == e.target.value)) {
							addNextBtn(4);
							$(".next3").attr('style','display:block !important');
							$(".next3-w").attr('style','display:none !important');
							$(e.target).attr("disabled", true);
						} else {
							$(".next3").attr('style','display:none !important');
							$(".next3-w").attr('style','display:block !important');

						}
					} else {
						$(".next3").attr('style','display:none !important');
						$(".next3-w").attr('style','display:none !important');
					}
				} catch (er) {
					console.error(er);
				}
			}
			$(document).on("keyup", "#nativeInput", callbackP4);

			// Puzzle 5
			function callbackP5(e) {
				try {
					if (e.target.value.length === 4) {
						if (isNotSuperadoButAllPreviousAre(5)) {
							escapp.submitPuzzle(5, e.target.value, {}, function (success) {
								if (success) {
									// console.log(res,"Solved puzzle 5: Deactivated bomb!")
									$(e.target).attr("disabled", true);
									escapp.displayCompletionDialog();
								}
							});
						} else if (isSuperado(5) && getSol(5) == e.target.value) {
							$(e.target).attr("disabled", true);
							escapp.displayCompletionDialog();
						}
					}
				} catch (er) {
					console.error(er);
				}
			}
			$(document).on("keyup", "#inputTemperature", callbackP5);
		}
	});

	window._Fetch.use();
	window.fetch = window._Fetch;
	fetch = window.fetch;
	window.fetch.addRoute('http://bomb.upm.es/temperature', {
		get: {
			response: { msg: "You are not using the right HTTP method" },
			expect: { status: 405, statusText: 'Method not allowed' },
			wait: 1000
		},
		post: {
			response: { code: "ODkxMw==".unhashCode() }
		}
	});

	window.fetch.addRoute('http://bomb.upm.es/temperature_', {
		get: {
			response: { msg: "You are not using the right HTTP method" },
			expect: { status: 405, statusText: 'Method not allowed' },
			wait: 1000
		},
		post: {
			response: { msg: 'Wrong body content' }
		}
	});
}.bind(fetch, window.fetch));
